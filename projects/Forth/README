
;------------------------------------------------------------------------------
;  Mecrisp-Ice - A conveniently enhanced fork of Swapforth by James Bowman
;------------------------------------------------------------------------------

A Forth compiler for the MCH2022 badge.

Matthias Koch, mecrisp.sourceforge.net

;------------------------------------------------------------------------------
; IO and PMOD laboratory
;------------------------------------------------------------------------------

Registers and lowlevel IO:

        in              ( -- io-addr )  PMOD in register

        out             ( -- io-addr )  PMOD out register
        out-clr         ( -- io-addr )    Write to  clear bits
        out-set         ( -- io-addr )    Write to    set bits
        out-xor         ( -- io-addr )    Write to toggle bits

        dir             ( -- io-addr )  PMOD direction register. 0: Input, 1: Output
        dir-clr         ( -- io-addr )     Write to  clear bits
        dir-set         ( -- io-addr )     Write to    set bits
        dir-xor         ( -- io-addr )     Write to toggle bits

        leds-special    ( -- io-addr )  Direct LED access. [6:4]: In [2:0]: Constant current drivers
        pwm-red         ( -- io-addr )  16 bit dimmer on red
        pwm-green       ( -- io-addr )  16 bit dimmer on green
        pwm-blue        ( -- io-addr )  16 bit dimmer on blue

        buttons         ( -- x ) Read current button state

Shortcuts for manual experimentation, u between 0 and 7:

        h               ( u -- ) Set pin high
        l               ( u -- ) Set pin low
        t               ( u -- ) Toggle pin
        z               ( u -- ) Set pin as input

Fun with colors:

        rgb             ( r g b -- ) Set dimmers for RGB LED with RGB value
        color           ( x -- ) Use LCD 5:6:5 color constant on RGB LED

Artwork and user interface:

        time            ( -- ud ) Read 32 bit millisecond counter
        blink           ( -- ) Blink LEDs inserted into PMOD connector
        printrandom     ( -- ) A little artwort
        pmod-lab        ( -- ) This is the turnkey definition, initialising everything

For internal usage:

        (ms)            ( -- a-addr ) Double variable for milliseconds elapsed, updated in interrupt
        interrupt       ( -- ) Updates (ms) and the pinstate display
        avgshift        ( -- u ) Shift width constant for smoothing filter
        expavg          ( avg x -- avg' ) Exponential moving average
        pinstate        ( -- ) Update pin state display prepared by pmod-lab
     green-sunshine     ( -- a-addr ) Variable for counting current brightness
     average-sunshine   ( -- a-addr ) Variable for smoothing average brightness
     sunshine-indicator ( u -- ) Show bar with values from 0 to 16

;------------------------------------------------------------------------------
; Textmode on 320x240 LCD
;------------------------------------------------------------------------------

        lcd-init        ( -- ) Initialise LCD
        waitretrace     ( -- ) Wait for end of current update activity

        char!           ( x addr -- ) Character memory store, 0 to 1199. 7-Bit ASCII, MSB selects color pair.
        char@           ( addr -- x ) Read from character memory

        font!           ( x addr -- ) Font memory store, 0 to 1023. 8 bytes per glyph, 128 glyphs.
        font@           ( addr -- x ) Read from font memory, 0 to 1023

        fg0             ( -- io-addr ) Normal    foreground color register
        bg0             ( -- io-addr ) Normal    background color register
        fg1             ( -- io-addr ) Highlight foreground color register
        bg1             ( -- io-addr ) Highlight background color register

        BLACK      MAROON     DARKGREY  RED      ORANGE
        NAVY       PURPLE     BLUE      MAGENTA  GREENYELLOW
        DARKGREEN  OLIVE      GREEN     YELLOW   PINK
        DARKCYAN   LIGHTGREY  CYAN      WHITE

                        ( -- x ) Color constants, 16 bit RGB 5:6:5 format

Default colors are:

    yellow fg0 io!  \ Normal foreground
    navy   bg0 io!  \ Normal background
    cyan   fg1 io!  \ Highlight foreground
    navy   bg1 io!  \ Highlight background

For internal usage:

        lcd-ctrl        ( -- io-addr ) LCD control lines
        lcd-data        ( -- io-addr ) LCD data, writeonly. Set $100 for commands.
        cmd>lcd         ( c -- )       Write command byte to LCD
           >lcd         ( c -- )       Write data byte to LCD

;------------------------------------------------------------------------------
; Character handling for text mode
;------------------------------------------------------------------------------

        highlight       ( -- ) Following text shall be highlighted
        normal          ( -- ) Following text shall be normal color

        caption         ( -- ) Fix caption lines when scrolling
        nocaption       ( -- ) Remove caption protection

        page            ( -- ) Clear display (but leave caption)
        clr             ( -- ) Same as page, just an alias

        +lcd            ( -- ) Terminal output both on LCD and serial
        -lcd            ( -- ) Serial terminal only

For internal usage:

        xpos            ( -- a-addr ) Variable for cursor x position
        ypos            ( -- a-addr ) Variable for cursor y position
        textmarker      ( -- a-addr ) Variable for text highlighting
        captionchars    ( -- a-addr ) Variable for amount of fixed characters

        addline         ( -- ) Scroll up display contents by one line
        addchar         ( c -- ) Add one character and advance cursor position
        stepback        ( -- ) Go back to last cursor position
        lcd-emit        ( c -- ) Add one character, handling line feed, backspace and UTF-8

        dispatch-emit   ( c -- ) Fork output both for LCD and serial terminal


;------------------------------------------------------------------------------
; Miscellaneous
;------------------------------------------------------------------------------

        cycles          ( -- u ) Read continuous cycle counter
        delay-cycles    ( u -- ) Delay given number of cycles

        sram@           ( addr -- x ) Read  128 kb word addressed data memory
        sram!           ( x addr -- ) Write 128 kb word addressed data memory

        esc?            ( -- Flag ) Check whether Escape was pressed


;------------------------------------------------------------------------------
Here comes a word list,                                          -- Glossary --
  with short descriptions of all currently included words:
View it with fixed-width font !
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; Terminal-IO
;------------------------------------------------------------------------------

        emit?           ( -- Flag ) Ready to send a character ?
        key?            ( -- Flag ) Checks if a key is waiting
        key             ( -- Char ) Waits for and fetches the pressed key
        emit            ( Char -- ) Emits a character.

;------------------------------------------------------------------------------
; Stack Jugglers
;------------------------------------------------------------------------------

Single-Jugglers:

        depth           ( -- +n ) Gives number of single-cell stack items.
        rdepth          ( -- +n ) HX8K only: Number of items on return stack.
        nip             ( x1 x2 -- x2 )
        drop            ( x -- )
        rot             ( x1 x2 x3 -- x2 x3 x1 )
        -rot            ( x1 x2 x3 -- x3 x1 x2 )
        swap            ( x1 x2 -- x2 x1 )
        tuck            ( x1 x2 -- x2 x1 x2 )
        over            ( x1 x2 -- x1 x2 x1 )
        ?dup            ( x -- 0 | x x )
        dup             ( x -- x x )

        >r              ( x -- ) (R: -- x )
        r>              ( -- x ) (R: x -- )
        r@              ( -- x ) (R: x -- x )
        rdrop           (  --  ) (R: x -- )

Double-Jugglers:        They perform the same for double numbers.

        2drop           ( x1 x2 -- )
        2swap           ( x1 x2 x3 x4 -- x3 x4 x1 x2 )
        2over           ( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )
        2dup            ( x1 x2 -- x1 x2 x1 x2 )

;------------------------------------------------------------------------------
; Logic
;------------------------------------------------------------------------------

        arshift         ( x1 u -- x2 ) Arithmetric right-shift of u bit-places
        rshift          ( x1 u -- x2 ) Logical right-shift of u bit-places
        lshift          ( x1 u -- x2 ) Logical  left-shift of u bit-places
        invert          ( x1 -- x2 )   Invert all bits
        not             ( x1 -- x2 )   Invert all bits = Bitwise not
        xor             ( x1 x2 -- x3 ) Bitwise Exclusive-OR
        or              ( x1 x2 -- x3 ) Bitwise OR
        and             ( x1 x2 -- x3 ) Bitwise AND
        false           ( --  0 ) False-Flag
        true            ( -- -1 ) True-Flag

;------------------------------------------------------------------------------
; Arithmetic for single numbers
;------------------------------------------------------------------------------

        /mod            ( n1 n2 -- n3 n4 ) n1 / n2 = n4 rem n3
        mod             ( n1 n2 -- n3 ) n1 / n2 = remainder n3
        /               ( n1 n2 -- n3 ) n1 / n2 = n3
        *               ( u1|n1 u2|n2 -- u3|n3 ) 16*16 = 16 Multiplication
        min             ( n1 n2 -- n1|n2 ) Keeps smaller of top two items
        max             ( n1 n2 -- n1|n2 ) Keeps greater of top two items
        umin            ( u1 u2 -- u1|u2 ) Keeps unsigned smaller
        umax            ( u1 u2 -- u1|u2 ) Keeps unsigned greater
        1-              ( u1|n1 -- u2|n2 ) Subtracts one, optimized
        1+              ( u1|n1 -- u2|n2 ) Adds one, optimized

        2*              ( n1 -- n2 ) Arithmetric  left-shift
        2/              ( n1 -- n2 ) Arithmetric right-shift
        abs             ( n -- u ) Absolute value
        negate          ( n1 -- n2 ) Negate
        sgn             ( u1 n1 -- n2 ) Give u1 the sign of n2
        -               ( u1|n1 u2|n2 -- u3|n3 ) Subtraction
        +               ( u1|n1 u2|n2 -- u3|n3 ) Addition

;------------------------------------------------------------------------------
; Arithmetic involving double numbers
;------------------------------------------------------------------------------

        um*             ( u1 u2 -- ud )    16*16 = 32 Multiplication

        um/mod          ( ud u1 -- u2 u3 ) ud / u1 = u3 remainder u2

        m+              ( d1 n -- d2 ) Addition of a double with a single
        m*              ( n1 n2 -- d )     n1 * n2 = d
        fm/mod          ( d n1 -- n2 n3 )  d / n1 = n3 remainder r2 floored
        sm/rem          ( d n1 -- n2 n3 )  d / n1 = n3 remainder r2 symmetric

        */              ( n1 n2 n3 -- n4 )     n1 * n2 / n3 = n4
        */mod           ( n1 n2 n3 -- n4 n5 )  n1 * n2 / n3 = n5 remainder n4

        d2*             ( d1 -- d2 ) Arithmetric  left-shift

        dabs            ( d -- ud ) Absolute value
        dnegate         ( d1 -- d2 ) Negate
        d-              ( ud1|d1 ud2|d2 -- ud3|d3 ) Subtraction
        d+              ( ud1|d1 ud2|d2 -- ud3|d3 ) Addition
        s>d             ( n -- d ) Makes a signed single number double length

;------------------------------------------------------------------------------
; Comparisions
;------------------------------------------------------------------------------

        u<=             ( u1 u2 -- flag )   Unsigned comparisions
        u>=             ( u1 u2 -- flag )
        u>              ( u1 u2 -- flag )
        u<              ( u1 u2 -- flag )
        <=              ( n1 n2 -- flag )   Signed comparisions
        >=              ( n1 n2 -- flag )
        >               ( n1 n2 -- flag )
        <               ( n1 n2 -- flag )
        0>              ( n -- flag )       Positive ?
        0<              ( n -- flag )       Negative ?
        0<>             ( x -- flag )
        0=              ( x -- flag )
        <>              ( x1 x2 -- flag )
        =               ( x1 x2 -- flag )

        d0=             ( d -- flag )

        within          ( x1 x2 x3 -- ? )   Check if x1 is within x2 and x3.

;------------------------------------------------------------------------------
; Tools for number input
;------------------------------------------------------------------------------

        number          ( c-addr len -- 0 )
                                     -- n 1 )
                                     -- n-low n-high 2 )
                        Tries to convert a string to a number.

;------------------------------------------------------------------------------
; Number base
;------------------------------------------------------------------------------

        binary          ( -- ) Sets base to 2
        decimal         ( -- ) Sets base to 10
        hex             ( -- ) Sets base to 16
        base            ( -- a-addr ) Base variable address

;------------------------------------------------------------------------------
; Memory access
;------------------------------------------------------------------------------

        cmove           ( c-addr1 c-addr2 u -- ) Moves backward
        cmove>          ( c-addr1 c-addr2 u -- ) Moves forward
        move            ( c-addr1 c-addr2 u -- ) Moves u Bytes in Memory
        fill            ( c-addr u c ) Fill u Bytes of Memory with value c

        constant  name  ( u|n -- )  Makes a single constant.
        variable  name  ( u|n -- )  Makes an initialized single variable

        2@              ( a-addr -- ud|d ) Fetches double number from memory
        2!              ( ud|d a-addr -- ) Stores double number in memory

        @               ( a-addr -- u|n ) Fetches single number from memory
        !               ( u|n a-addr -- ) Stores single number in memory
        +!              ( u|n a-addr -- ) Add to memory location

        c@              ( c-addr -- char ) Fetches byte from memory
        c!              ( char c-addr ) Stores byte in memory

IO memory area:

        io@             ( c-addr -- x ) Fetches from IO register
        io!             ( x c-addr -- ) Stores  into IO register

        xor!            ( mask c-addr -- ) Toggle bits
        bic!            ( mask c-addr -- ) Clear BIts
        bis!            ( mask c-addr -- ) Set BIts

;------------------------------------------------------------------------------
; Strings and beautiful output
;------------------------------------------------------------------------------

String routines:

        type            ( c-addr length -- )
                        Prints a string.

        rtype           ( c-addr length u -- )
                        Prints a string in a field u characters wide.

        s" Hello"       Compiles a string and
                        ( -- c-addr length )
                        gives back its address and length when executed.

        ." Hello"       Compiles a string and
                        ( -- )
                        prints it when executed.

        ( Comment )     Ignore Comment
        \ Comment       Comment to end of line

        cr              ( -- ) Emits line feed
        bl              ( -- 32 ) ASCII code for Space
        space           ( -- ) Emits space
        spaces          ( n -- ) Emits n spaces if n is positive

        accept          ( c-addr maxlength -- length ) Read input into a string.

Counted string routines:

        count           ( cstr-addr -- c-addr length )
                        Convert counted string into addr-length string

Pictured numerical output:

        [char] *        Compiles code of following char
                        ( -- char ) when executed

        char *          ( -- char ) gives code of following char
        hold            ( char -- ) Adds character to pictured number
                                    output buffer from the front.

        sign            ( n -- ) Add a minus sign to pictured number
                                 output buffer, if n is negative

        #S              ( ud1|d1 -- 0 0 ) Add all remaining digits
                        from the double length number to output buffer
        #               ( ud1|d1 -- ud2|d2 ) Add one digit from the
                        double length number to output buffer
        #>              ( ud|d -- c-addr len )
                        Drops double-length number and finishes
                        pictured numeric output ready for type
        <#              ( -- ) Prepare pictured number output buffer
        u.              ( u -- ) Print unsigned single number
        .               ( n -- ) Print single number
        ud.             ( ud -- ) Print unsigned double number
        d.              ( d -- ) Print double number

        u.r             ( u width -- ) Print      unsigned right aligned
         .r             ( n width -- ) Print        signed right aligned
        d.r             ( d width -- ) Print double signed right aligned

        buf0            ( -- a-addr ) Start of number output buffer
        buf             ( -- a-addr ) End   of number output buffer
        hld             ( -- a-addr ) Variable with current position

Deep insights:

        words           ( -- ) Prints list of defined words.
        .x2             ( c -- ) Prints  8 bit unsigned in hex base
        .x              ( u -- ) Prints 16 bit unsigned in hex base
                                 This is independent of number subsystem.

;------------------------------------------------------------------------------
; User input and its interpretation
;------------------------------------------------------------------------------

        tib             ( -- c-addr ) Input buffer
        pad             ( -- c-addr ) Location to hold temporary data

        refill          ( -- ? ) Refill input buffer, return true if successful
        source!         ( c-addr len -- ) Change source
        source          ( -- c-addr len ) Current source
        >in             ( -- addr ) Variable with current offset into source

        /string         ( c-addr1 u1 n -- c-addr2 u2 ) Cut n leading characters
        parse-name      ( -- c-addr len ) Get next token from input buffer
        parse           ( char -- c-addr len )
                        Cuts anything delimited by char out of input buffer

        evaluate        ( any addr len -- any ) Interpret given string
        quit            ( many -- ) (R: many -- ) Resets Stacks
        abort           ( many -- ) (R: many -- ) Print ? and quit

;------------------------------------------------------------------------------
; Dictionary expansion
;------------------------------------------------------------------------------

        align           ( -- ) Aligns dictionary pointer
        aligned         ( c-addr -- a-addr ) Advances to next aligned address
        cell+           ( x -- x+2 ) Add size of one cell
        cells           ( n -- 2*n ) Calculate size of n cells

        allot           ( n -- ) Tries to advance Dictionary Pointer by n bytes
        here            ( -- a-addr|c-addr )
                        Gives current position in Dictionary

        ,               ( u|n -- ) Appends a single number to dictionary
        c,              ( char -- ) Appends a byte to dictionary

        unused          ( -- u ) How many free space is still available ?

        cornerstone name    Create a permanent dictionary wayback point
        new                 Core wayback point.

;------------------------------------------------------------------------------
; Dictionary expansion  (more internal)
;------------------------------------------------------------------------------

        s,              ( c-addr len -- ) Inserts a string with a maximum
                                          of 255 characters without runtime
        sliteral        ( c-addr len -- ) Insert a string with runtime

        literal         ( u|n -- ) Compiles a literal

        compile,        ( a-addr -- ) Compiles a call to a subroutine

        forth           ( -- a-addr ) Variable with entry point for dictionary

        ahead           ( -- a-addr ) Prepare a forward jump

;------------------------------------------------------------------------------
; Flags and inventory
;------------------------------------------------------------------------------

        immediate       ( -- ) Makes current definition immediate.
        foldable        ( n -- ) Current word becomes foldable with n constants

        sfind           ( c-addr len -- c-addr len 0 | a-addr flags )
                               Searches for a string in Dictionary.

;------------------------------------------------------------------------------
; Compiler essentials
;------------------------------------------------------------------------------

        execute         ( a-addr -- ) Calls subroutine
        recurse         ( -- ) Lets the current definition call itself
        ' name          ( -- a-addr ) Tries to find name in dictionary
                                      gives back executable address
        ['] name        ( -- a-addr)  Tick that compiles the executable address
                                      of found word as literal
        postpone name   ( -- ) Helps compiling immediate words.
        does>           ( -- ) executes: ( -- a-addr )
                               Gives address to where you have stored data.
        create name     ( -- ) Create a definition with default action
        >body           ( a-addr -- a-addr ) Address of data field after create
        state           ( -- a-addr ) Address of state variable
        ]               ( -- ) Switch to compile state
        [               ( -- ) Switch to execute state
        ;               ( -- ) Finishes new definition
        : name          ( -- ) Opens new definition
        :noname         ( -- a-addr ) Opens new definition without name

;------------------------------------------------------------------------------
; Control structures
;------------------------------------------------------------------------------

Decisions:

flag if ... then
flag if ... else ... then

        then            ( -- )           This is the common
        else            ( -- )           flag if ... [else ...] then
        if              ( flag -- )      structure.

Case:

n case
     m1   of ... endof
     m2   .. ... .....
    all others
  endcase

        case            ( n -- n )       Begins case structure
        of              ( m -- )         Compares m with n, choose this if n=m
        endof           ( -- )           End of one possibility
        endcase         ( n -- )         Ends case structure, discards n

Indefinite Loops:

begin ... again
begin ... flag until
begin ... flag while ... repeat

        repeat          ( -- ) Finish of a middle-flag-checking loop.

        while           ( flag -- ) Check a flag in the middle of a loop

        until           ( flag -- ) begin ... flag until
                                    loops until flag is true
        again           ( -- )  begin ... again
                                is an endless loop
        begin           ( -- )


Definite Loops:

limit index   do ... [one or more leave(s)] ... loop
             ?do ... [one or more leave(s)] ... loop
              do ... [one or more leave(s)] ... n +loop
             ?do ... [one or more leave(s)] ... n +loop


        j               ( -- u|n ) Gives second loop index
        i               ( -- u|n ) Gives innermost loop index


        unloop          (R: old-limit old-index -- )
                        Drops innermost loop structure,
                        pops back old loop structures to loop registers

        exit            ( -- ) Returns from current definition.

        leave           ( -- ) (R: old-limit old-index -- )
                        Leaves current innermost loop promptly

        +loop           ( u|n -- )
                        (R: unchanged | old-limit old-index -- )
                        Adds number to current loop index register
                        and checks whether to continue or not

        loop            ( -- )
                        (R: unchanged | old-limit old-index -- )
                        Increments current loop index register by one
                        and checks whether to continue or not.

        ?do             ( Limit Index -- )
                        (R: unchanged | -- old-limit old-index )
                        Begins a loop if limit and index are not equal

        do              ( Limit Index -- )
                        (R: -- old-limit old-index )
                        Begins a loop

        bounds          ( addr len -- limit index )
                        Calculate values to loop over a string

;------------------------------------------------------------------------------
; Misc hardware
;------------------------------------------------------------------------------

        us              ( u -- ) Wait u microseconds
        ms              ( u -- ) Wait u milliseconds

        ticks           ( -- u ) Read current ticks
        nextirq         ( u -- ) Trigger next interrupt u cycles
                                 after the last one

        randombit       ( -- 0 | 1 ) Gives a random bit
        random          ( -- x ) Gives a random number

        eint?           ( -- ? ) Are interrupts enabled ?
        eint            ( -- ) Enable ticks counter overflow interrupt
        dint            ( -- ) Disable interrupt

;------------------------------------------------------------------------------
; Insight tools
;------------------------------------------------------------------------------

        .s              ( many -- many ) Prints stack contents

        dump            ( addr len -- ) Dump memory contents

        insight         ( -- ) Complete printout of dictionary structure

        name.           ( a-addr -- ) If this is the code-start of a definition,
                                      try to print its name.
        memstamp        ( a-addr -- ) Show memory location nicely
        disasm-$        ( -- a-addr ) Variable for current disasm position
        disasm-cont     ( -- a-addr ) Variable: Continue up to this position
        disasm-step     ( -- ) Disassemble one more instruction

        seec            ( -- ) Continue to see at disasm-$
        see name        ( -- ) See the definition

